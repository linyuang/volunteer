<template>
    <div class="login">
        <Header head="{{Head}}"></Header>
        <div class="content" onclick="userData()">
            <div class="loginLogoBox">
                <image class="loginLogo" src="{{loginLogoImageUrl}}"></image>
            </div>
            <div class="loginInputBox">
                <div class="inputBox" onclick="loginTip()" repeat="item in LoginInput">
                    <input id="{{item.id}}" class="loginInput {{com_inputBorderColor(item)}}" type="{{item.type}}"
                           placeholder="{{item.placeholder}}" maxlength="30" value="{{item.inputValue}}" disabled="{{com_disable()}}"
                           oninput="Change(item)">
                    <text class="errorTip">{{com_errorTip(item)}}</text>
                </div>

                <!--<input id="userName" class="LoginInput" type="text"-->
                       <!--placeholder="请输入您的账号" maxlength="30" value="{{com_userNameValue()}}"-->
                       <!--oninput="Change('userName')">-->

                <!--<input id="password" class="LoginInput" type="password"-->
                       <!--placeholder="请输入您的密码" maxlength="30" value="{{com_passwordValue()}}"-->
                       <!--oninput="Change('password')">-->
            </div>
            <div class="loginButtonBox">
                <div class="newUserButton" onclick="toRegister()">
                    <text class="newUserText">注册</text>
                </div>
                <div class="loginButton" onclick="userLogin()">
                    <text class="loginText">登录</text>
                </div>
            </div>
        </div>
    </div>
</template>
<script>
    import * as Header from '../components/header.we'
    import Router from '../router/router'
    import Fetch from '../stream/fetch'
    import Apis from '../mixins/api'
//    import Stomp from '../foreignLibrary/stomp.min'
//    import SockJs from '../foreignLibrary/sockjs.min'
    const login_reg = new BroadcastChannel('Register');
    const login_user =  new BroadcastChannel('Login');
    module.exports = {
        data:{
            Head:{
                titleText:'用户登录',
                backShow:'visible',
                menuShow:'hidden'
            },
            loginLogoImageUrl:'file:///android_asset/drawable/cover_image.png',
            RegSignal:false,
            UserInfo:{},
            LoginInput:[
                {
                    id:'userName',
                    type:'text',
                    inputValue:'',
                    placeholder:'请输入您的账号',
                    errorType:'',
                    isRule:true,
                    isBlur:true
                },
                {
                    id:'password',
                    type:'password',
                    inputValue:'',
                    placeholder:'请输入您的密码',
                    errorType:'',
                    isRule:true,
                    isBlur:true
                }
            ],
            Logining:false
        },
        methods:{
            upData:function () {
                let _this = this;
                let loginInfo = _this.LoginInput;
                Apis.GETITEM("UserInfo",(res) => {
                    if(res.result == "success"){
                        let data = (typeof res.data == 'string') ? JSON.parse(res.data) : res.data;
                        loginInfo.forEach((item) => {
                            item.inputValue = data[item.id];
                        });
                        _this.RegSignal = true;
                    }
                })
            },
            userLogin:function () {
                if(this.inputVoidTest() || this.Logining){
                    this.loginTip();
                    return ;
                }
                let result = {};
                let body = 'json=';
                let loginInfo = this.LoginInput;
                loginInfo.forEach((item) => {
                   result[item.id] = item.inputValue;
                });
                body += JSON.stringify(result);
                Apis.TIP('body =>' + body);
                Fetch.FETCHPOST('login',body,(res) => {
                    Apis.TIP('res.ok => ' + res.ok + '');
                    let data_return = (typeof res.data == 'string') ? JSON.parse(res.data) : res.data;
                    let returnUserInfo = data_return["USER"];
                    let LocalUserInfo = {};
                    if(data_return["INFO"].code == 400 && data_return["USER"].enable == 1){
                        Apis.TIP('登录成功');
                        LocalUserInfo = result;
                        for (let [key,value] of Object.entries(returnUserInfo)){
                            LocalUserInfo[key] = value;
                        }
                        Apis.SETITEM('Login',"true",()=>{});
//                        Apis.SETITEM('SaveIf',"true",()=>{});
                        Apis.TIP(JSON.stringify(LocalUserInfo));
                        Apis.SETITEM("UserInfo",JSON.stringify(LocalUserInfo),(event) => {
                           if(event.result == "success"){
                               login_user.postMessage("loginSuccess");
                               Router.POP();
                           }
                        });
                    }else {
                        if(data_return["INFO"].code == 401){
                            Apis.TIP('登录失败，用户不存在');
                        }else {
                            if(data_return["INFO"].code == 402){
                                Apis.TIP('登录失败，密码错误');
                            }else {
                                if(data_return["INFO"].code == 411){
                                    Apis.TIP('登录失败，该用户已被冻结');
                                }
                            }
                        }
                    }
                });
            },
            Change:function (obj,event) {
                obj.inputValue = event.value;
                this.inputTest(obj);
            },
            userData:function () {
                let _this = this;
                _this.$el('userName').blur();
                _this.$el('password').blur();
            },
            toRegister:function () {
                Router.PUSH('/views/register');
            },
            inputTest:function (obj) {
                if(!this.errString(obj)){
                    obj.isRule = true;
                    obj.errorType = 'rightString';
                }else {
                    obj.isRule = false;
                    obj.errorType = 'errorString';
                }
            },
            errString:function (obj) {
                let Rule = /[,#$= ]|[<].{0,1000}[>]|[\u4e00-\u9fa5]/;
                return Rule.test(obj.inputValue);
            },
            inputVoidTest:function () {
              const _this = this;
              let info = _this.LoginInput;
              let result = new Boolean();
              info.forEach((item) => {
                  if(item.isRule){
                      if(item.inputValue != ''){
                          item.errorType = 'rightString';
                          result = false;
                      }else {
                          item.errorType = (item.id == 'userName') ? 'voidUserName' : 'voidPassword';
                          result = true;
                      }
                  }else {
                      result = true;
                  }
              });
              return result;
            },
//            listener:function () {
//                let sock = new SockJs('http://192.168.191.1:8080/Yuc/yucService');
//                let stomp = Stomp.over(sock);
//                stomp.connect('roo1','root',function (frame) {
//                    Apis.TOAST("****** Connected ******");
//                    stomp.subscribe("/user/queue/notifications",function (message) {
//                        Apis.TIP("here ==========="+message);
//                    });
//                });
//            },
            loginTip:function () {
              if(this.Logining){
                  Apis.TOAST('正在登陆，请稍等');
              }
            },
            com_disable:function () {
                return this.Logining;
            },
            com_inputBorderColor:function (obj) {
                return (obj.isRule) ? 'inputNormalBorder' : 'inputErrorBorder';
            },
            com_errorTip:function (obj) {
                return Apis.ERRORTIP(obj);
            }
        },
        ready:function () {
            let _this = this;
            login_reg.onmessage = function (event) {
                if(event.data = 'registerSuccess'){
                    _this.upData();
                }
            };
        }
    }
</script>
<style scoped>
    .login{
        flex: 1;
        overflow-y: scroll;
    }
    .content{
        flex: 1;
        flex-direction: column;
        align-items: center;
        background-color: #ADFF2F;
        padding-top: 100px;
    }
    .loginLogoBox {
        justify-content: center;
        align-items: center;
        width: 400px;
        height: 400px;
        background-color: #ffffff;
        border-radius: 200px;
    }
    .loginLogo {
        width: 400px;
        height: 400px;
    }
    .loginInputBox {
        flex-direction: column;
        width: 500px;
        height: 300px;
        margin-top: 100px;
    }
    .inputBox{
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 500px;
        height: 150px;
    }
    .loginInput{
        flex: 1;
        width: 500px;
        height: 90px;
        font-size: 30px;
        padding-left: 30px;
        background-color: #ffffff;
        border-width: 2px;
        border-style: solid;
    }
    .inputNormalBorder{
        border-color: #e3e3e3;
    }
    .inputErrorBorder{
        border-color: #ff0000;
    }
    .errorTip{
        width: 500px;
        height: 60px;
        font-size: 20px;
        line-height: 30px;
        color: #ff0000;
    }
    .loginButtonBox{
        flex-direction: row;
        width: 500px;
        height: 200px;
        justify-content: space-between;
        align-items: center;
    }
    .newUserButton,.loginButton{
        justify-content: center;
        align-items: center;
        width: 200px;
        height: 100px;
        background-color: #eeeeee;
        border-radius: 10px;
    }
    .newUserText,.loginText{
        font-size: 40px;
        font-weight: bold;
    }
</style>